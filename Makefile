# Makefile for Slab Pool Allocator
#
# This Makefile can work standalone with defaults or use config.mk generated by ./configure
#

# Include generated configuration if it exists
-include config.mk

# Default values (used if config.mk doesn't exist)
PREFIX ?= /usr/local
CXX ?= c++
IS_CLANG ?= no
BUILD_TYPE ?= addrsan
ENABLE_TESTS ?= yes
ENABLE_DEMO ?= yes
VERBOSE ?= no
ENABLE_ASAN ?= auto
ENABLE_LSAN ?= auto
ENABLE_MSAN ?= auto
ENABLE_UBSAN ?= auto
ENABLE_TSAN ?= no
ENABLE_COVERAGE ?= no

# Auto-detect Google Test if not specified
ifndef GTEST_DIR
    ifneq ($(wildcard /opt/homebrew/Cellar/googletest/*),)
        GTEST_DIR := $(shell ls -d /opt/homebrew/Cellar/googletest/* | head -n1)
    else ifneq ($(wildcard /usr/local/include/gtest),)
        GTEST_DIR := /usr/local
    else ifneq ($(wildcard /usr/include/gtest),)
        GTEST_DIR := /usr
    endif
endif

# Determine if we should enable tests
ifeq ($(GTEST_DIR),)
    ENABLE_TESTS := no
endif

# Base directories
BASEOBJDIR := ./obj
SRCDIR := .
INCLUDEDIR := ./spallocator
DOCDIR := ./spallocator/docs

# Compiler flags
CXXSTD := -std=c++23
INCLUDES := -I$(INCLUDEDIR)
WARNINGS := -Wall -Wextra -Wpedantic

# Add Google Test includes if tests are enabled
ifeq ($(ENABLE_TESTS),yes)
    INCLUDES += -I$(GTEST_DIR)/include
    LDLIBS := -L$(GTEST_DIR)/lib -lgtest
endif

# Base flags
CXXFLAGS := $(CXXSTD) $(INCLUDES) $(WARNINGS) -MMD -MP $(USER_CXXFLAGS)
LDFLAGS := $(LDLIBS)


# Build-type specific flags
ifeq ($(BUILD_TYPE),debug)
    CXXFLAGS += -DDEBUG -O0 -g -fno-omit-frame-pointer
    LDFLAGS += -g
    OBJDIRNAME := debug
else ifeq ($(BUILD_TYPE),release)
    CXXFLAGS += -DNDEBUG -O3
    LDFLAGS += -O3
    OBJDIRNAME := release
else ifeq ($(BUILD_TYPE),addrsan)
    CXXFLAGS += -DDEBUG -O0 -g -fno-omit-frame-pointer
    LDFLAGS += -g
    OBJDIRNAME := addrsan
    # AddressSanitizer
    ifeq ($(ENABLE_ASAN),yes)
        CXXFLAGS += -fsanitize=address
        LDFLAGS += -fsanitize=address
    else ifeq ($(ENABLE_ASAN),auto)
        CXXFLAGS += -fsanitize=address
        LDFLAGS += -fsanitize=address
    endif
    # LeakSanitizer
	ifeq ($(ENABLE_LSAN),yes)
		CXXFLAGS += -fsanitize=leak
		LDFLAGS += -fsanitize=leak
	else ifeq ($(ENABLE_LSAN),auto)
		CXXFLAGS += -fsanitize=leak
		LDFLAGS += -fsanitize=leak
    endif
    # UndefinedBehaviorSanitizer
    ifeq ($(ENABLE_UBSAN),yes)
        CXXFLAGS += -fsanitize=undefined
        LDFLAGS += -fsanitize=undefined
    else ifeq ($(ENABLE_UBSAN),auto)
        CXXFLAGS += -fsanitize=undefined
        LDFLAGS += -fsanitize=undefined
    endif
else ifeq ($(BUILD_TYPE),memsan)
    CXXFLAGS += -DDEBUG -O0 -g -fno-omit-frame-pointer
    LDFLAGS += -g
    OBJDIRNAME := memsan
    ifeq ($(ENABLE_MSAN),yes)
        CXXFLAGS += -fsanitize=memory
        LDFLAGS += -fsanitize=memory
    endif
    # UndefinedBehaviorSanitizer
    ifeq ($(ENABLE_UBSAN),yes)
        CXXFLAGS += -fsanitize=undefined
        LDFLAGS += -fsanitize=undefined
    else ifeq ($(ENABLE_UBSAN),auto)
        CXXFLAGS += -fsanitize=undefined
        LDFLAGS += -fsanitize=undefined
    endif
else ifeq ($(BUILD_TYPE),threadsan)
    CXXFLAGS += -DDEBUG -O0 -g -fno-omit-frame-pointer
    LDFLAGS += -g
    OBJDIRNAME := threadsan
    ifeq ($(ENABLE_TSAN),yes)
        CXXFLAGS += -fsanitize=thread
        LDFLAGS += -fsanitize=thread
    endif
    # UndefinedBehaviorSanitizer
    ifeq ($(ENABLE_UBSAN),yes)
        CXXFLAGS += -fsanitize=undefined
        LDFLAGS += -fsanitize=undefined
    else ifeq ($(ENABLE_UBSAN),auto)
        CXXFLAGS += -fsanitize=undefined
        LDFLAGS += -fsanitize=undefined
    endif
endif

# Coverage flags
ifeq ($(ENABLE_COVERAGE),yes)
    CXXFLAGS += --coverage -fprofile-arcs -ftest-coverage
    LDFLAGS += --coverage
endif

# Verbose output
ifeq ($(VERBOSE),yes)
    Q :=
    ECHO := @true
else
    Q := @
    ECHO := @echo
endif

# Object directory
OBJDIR := $(BASEOBJDIR)/$(OBJDIRNAME)

# Source files
TESTER_SRC := tester.cpp
TESTER_TARGET := tester
TESTER_DEPFILE := $(OBJDIR)/$(TESTER_TARGET).d

DEMO_SRC := demo_shared_ptr.cpp
DEMO_TARGET := demo_shared_ptr
DEMO_DEPFILE := $(OBJDIR)/$(DEMO_TARGET).d

# Header dependencies
HEADERS := $(wildcard $(INCLUDEDIR)/*.hpp)

# Targets
TARGETS :=
ifeq ($(ENABLE_TESTS),yes)
    TARGETS += $(OBJDIR)/$(TESTER_TARGET)
endif
ifeq ($(ENABLE_DEMO),yes)
    TARGETS += $(OBJDIR)/$(DEMO_TARGET)
endif

# Default target
.DEFAULT_GOAL := all

# Phony targets
.PHONY: all clean test demo install uninstall help check-config

all: check-config $(TARGETS)
	$(Q)if [ -n "$(TARGETS)" ]; then \
		echo "Build complete ($(BUILD_TYPE) mode)"; \
	else \
		echo "Nothing to build (tests and demo disabled)"; \
	fi

# Check if configuration looks reasonable
check-config:
	$(Q)if [ ! -f config.mk ]; then \
		echo ""; \
		echo "NOTE: Running with default configuration."; \
		echo "      For customized build, run: ./configure [options]"; \
		echo ""; \
	fi

# Create object directory
$(OBJDIR):
	$(ECHO) "  MKDIR   $(OBJDIR)"
	$(Q)mkdir -p $(OBJDIR)

# Build tester
$(OBJDIR)/$(TESTER_TARGET): $(TESTER_SRC) $(HEADERS) | $(OBJDIR)
	$(ECHO) "  CXX     $@"
	$(Q)$(CXX) $(CXXFLAGS) $< -o $@ $(LDFLAGS)
	$(Q)rm -f $(BASEOBJDIR)/$(TESTER_TARGET)
	$(Q)ln -s $(OBJDIRNAME)/$(TESTER_TARGET) $(BASEOBJDIR)/$(TESTER_TARGET)

# Build demo
$(OBJDIR)/$(DEMO_TARGET): $(DEMO_SRC) $(HEADERS) | $(OBJDIR)
	$(ECHO) "  CXX     $@"
	$(Q)$(CXX) $(CXXFLAGS) $< -o $@ $(LDFLAGS)
	$(Q)rm -f $(BASEOBJDIR)/$(DEMO_TARGET)
	$(Q)ln -s $(OBJDIRNAME)/$(DEMO_TARGET) $(BASEOBJDIR)/$(DEMO_TARGET)

# Run tests
test: $(OBJDIR)/$(TESTER_TARGET)
	$(ECHO) "  RUN     $(TESTER_TARGET)"
	$(Q)$(OBJDIR)/$(TESTER_TARGET)

# Run demo
demo: $(OBJDIR)/$(DEMO_TARGET)
	$(ECHO) "  RUN     $(DEMO_TARGET)"
	$(Q)$(OBJDIR)/$(DEMO_TARGET)

# Install (header-only library)
install:
	$(ECHO) "  INSTALL headers to $(PREFIX)/include/spallocator"
	$(Q)install -d $(PREFIX)/include/spallocator
	$(Q)install -m 644 $(INCLUDEDIR)/*.hpp $(PREFIX)/include/spallocator/
	$(ECHO) "  INSTALL docs to $(PREFIX)/share/doc/spallocator"
	$(Q)install -d $(PREFIX)/share/doc/spallocator
	$(Q)install -m 644 README.md IMPLEMENTATION.md $(PREFIX)/share/doc/spallocator/
	$(Q)if [ -d $(DOCDIR) ]; then \
		install -m 644 $(DOCDIR)/*.md $(PREFIX)/share/doc/spallocator/ 2>/dev/null || true; \
	fi
	$(ECHO) "Installation complete!"

# Uninstall
uninstall:
	$(ECHO) "  REMOVE  $(PREFIX)/include/spallocator"
	$(Q)rm -rf $(PREFIX)/include/spallocator
	$(ECHO) "  REMOVE  $(PREFIX)/share/doc/spallocator"
	$(Q)rm -rf $(PREFIX)/share/doc/spallocator
	$(ECHO) "Uninstallation complete!"

# Clean build artifacts
clean:
	$(ECHO) "  CLEAN   $(OBJDIR)"
	$(Q)rm -f $(OBJDIR)/$(TESTER_TARGET) $(OBJDIR)/$(DEMO_TARGET)
	$(Q)rm -f $(OBJDIR)/*.o $(OBJDIR)/*.d
	$(Q)rm -f $(BASEOBJDIR)/$(TESTER_TARGET) $(BASEOBJDIR)/$(DEMO_TARGET)
	$(Q)rm -f *.gcov *.gcda *.gcno
	$(ECHO) "Clean complete!"

# Distclean - remove generated files
distclean: clean
	$(ECHO) "  CLEAN   config.mk"
	$(Q)rm -f config.mk
	$(Q)rm -rf $(BASEOBJDIR)

# Help target
help:
	@echo "Slab Pool Allocator - Build Targets"
	@echo ""
	@echo "Configuration:"
	@echo "  ./configure [options]  - Configure the build (run before make)"
	@echo "  make help              - Show this help"
	@echo ""
	@echo "Build targets:"
	@echo "  make                   - Build all enabled targets"
	@echo "  make all               - Same as 'make'"
	@echo "  make test              - Run test suite"
	@echo "  make demo              - Run demo program"
	@echo "  make clean             - Remove build artifacts"
	@echo "  make distclean         - Remove all generated files"
	@echo ""
	@echo "Installation:"
	@echo "  make install           - Install headers and docs to PREFIX"
	@echo "  make uninstall         - Remove installed files"
	@echo ""
	@echo "Build type selection (without configure):"
	@echo "  make BUILD_TYPE=debug"
	@echo "  make BUILD_TYPE=release"
	@echo "  make BUILD_TYPE=addrsan    # AddressSanitizer + LSan + UBSan (default), implies debug"
	@echo "  make BUILD_TYPE=memsan     # MemorySanitizer + UBSan, implies debug"
	@echo "  make BUILD_TYPE=threadsan  # ThreadSanitizer + UBSan, implies debug"
	@echo ""
	@echo "Current configuration:"
	@echo "  Build type:    $(BUILD_TYPE)"
	@echo "  Compiler:      $(CXX)"
	@echo "  Tests:         $(ENABLE_TESTS)"
	@echo "  Demo:          $(ENABLE_DEMO)"
	@echo "  Prefix:        $(PREFIX)"
	@echo ""

# Include generated dependency files
-include $(TESTER_DEPFILE)
-include $(DEMO_DEPFILE)
